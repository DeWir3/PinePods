name: Update AUR Package

on:
  workflow_run:
    workflows: ["Build Tauri Clients"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (e.g. 0.6.6)"
        required: true

jobs:
  update-aur-package:
    # Only run if the triggering workflow succeeded or this is a manual trigger
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            # Extract version from the triggering release
            RELEASE_TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)
            echo "VERSION=$RELEASE_TAG" >> $GITHUB_ENV
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git jq

      - name: Set up Git
        run: |
          git config --global user.name "${{ secrets.GIT_USER }}"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"

      - name: Set up SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts

      - name: Set up GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.AUR_GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import --pinentry-mode loopback

      - name: Clone AUR package
        run: |
          git clone ssh://aur@aur.archlinux.org/pinepods.git aur-package
          cd aur-package

      - name: Update PKGBUILD and .SRCINFO
        run: |
          cd aur-package
          # Update PKGBUILD
          sed -i "s/^pkgver=.*/pkgver=$VERSION/" PKGBUILD
          sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD

          # Calculate checksums for both architectures
          x86_64_url="https://github.com/madeofpendletonwool/PinePods/releases/download/$VERSION/Pinepods_${VERSION}_amd64.deb"
          aarch64_url="https://github.com/madeofpendletonwool/PinePods/releases/download/$VERSION/Pinepods_${VERSION}_arm64.deb"

          x86_64_sum=$(curl -sL "$x86_64_url" | sha256sum | cut -d' ' -f1)
          aarch64_sum=$(curl -sL "$aarch64_url" | sha256sum | cut -d' ' -f1)

          # Update checksums in PKGBUILD
          sed -i "s/sha256sums_x86_64=('.*')/sha256sums_x86_64=('$x86_64_sum')/" PKGBUILD
          sed -i "s/sha256sums_aarch64=('.*')/sha256sums_aarch64=('$aarch64_sum')/" PKGBUILD

          # Generate new .SRCINFO
          makepkg --printsrcinfo > .SRCINFO

      - name: Commit and push changes
        run: |
          cd aur-package
          git add PKGBUILD .SRCINFO
          git commit -m "Update to version $VERSION"
          # Configure GPG signing
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          gpg-connect-agent reloadagent /bye
          git config --global commit.gpgsign true
          git config --global user.signingkey ${{ secrets.GPG_KEY_ID }}
          # Amend the commit with GPG signature
          git commit --amend --no-edit -S
          git push -f
