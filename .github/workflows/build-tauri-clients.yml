name: Build Tauri Clients

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Manual override version tag (optional)"
        required: false

jobs:
  compile:
    name: Compile
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    runs-on: ${{ matrix.os }}

    # Set an environment variable based on the OS
    env:
      DEPENDS_SETUP: ${{ matrix.os == 'ubuntu-latest' && 'true' || 'false' }}

    steps:
      - name: Set Image Tag
        id: set_tag
        run: |
          echo "IMAGE_TAG=${{ github.event.release.tag_name || github.event.inputs.version || 'latest' }}" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "ARTIFACT_NAME1=deb/pinepods_${{ env.IMAGE_TAG }}_amd64.deb" >> $GITHUB_ENV
            echo "ARTIFACT_NAME2=appimage/pinepods_${{ env.IMAGE_TAG }}_amd64.AppImage" >> $GITHUB_ENV
            echo "ARTIFACT_NAME3=rpm/pinepods-${{ env.IMAGE_TAG }}.x86_64.rpm"
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "ARTIFACT_NAME1=nsis/Pinepods_${{ env.IMAGE_TAG }}_x64-setup.exe" >> $Env:GITHUB_ENV
            echo "ARTIFACT_NAME2=msi/Pinepods_${{ env.IMAGE_TAG }}_x64_en-US.msi" >> $Env:GITHUB_ENV
          elif [ "${{ matrix.os }}" = "macOS-latest" ]; then
            echo "ARTIFACT_NAME1=dmg/Pinepods_${{ env.IMAGE_TAG }}_aarch64.dmg" >> $GITHUB_ENV
            echo "ARTIFACT_NAME2=macos/Pinepods.app" >> $GITHUB_ENV
          fi
        shell: bash
        if: ${{ matrix.os != 'windows-latest' }}

      - name: Set environment variables (Windows)
        run: |
          echo "IMAGE_TAG=${{ github.event.release.tag_name || github.event.inputs.version || 'latest' }}" >> $Env:GITHUB_ENV
          echo "ARTIFACT_NAME1=nsis/Pinepods_${{ env.IMAGE_TAG }}_x64-setup.exe" >> $Env:GITHUB_ENV
          echo "ARTIFACT_NAME2=msi/Pinepods_${{ env.IMAGE_TAG }}_x64_en-US.msi" >> $Env:GITHUB_ENV
        shell: pwsh
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Setup | Checkout
        uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - uses: cargo-bins/cargo-binstall@main

      - name: Depends install
        if: ${{ env.DEPENDS_SETUP == 'true' }}
        run: |
          sudo apt update
          sudo apt install -qy libgtk-3-dev
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: wasm-addition
        run: |
          rustup target add wasm32-unknown-unknown

      - name: Install Trunk
        run: |
          cargo binstall trunk -y

      - name: Install Tauri
        run: |
          cargo install tauri-cli --locked

      - name: Update Tauri version (UNIX)
        run: |
          cd web/src-tauri
          # Use different sed syntax for macOS
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s/\"version\": \".*\"/\"version\": \"${IMAGE_TAG}\"/" tauri.conf.json
          else
            sed -i "s/\"version\": \".*\"/\"version\": \"${IMAGE_TAG}\"/" tauri.conf.json
          fi
          cat tauri.conf.json
        shell: bash
        if: ${{ matrix.os != 'windows-latest' }}

      - name: Setup Python
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Verify directory and update Tauri version (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          cd web/src-tauri
          dir
          python .\change-version.py tauri.conf.json ${{ env.IMAGE_TAG }}
          Get-Content tauri.conf.json
        shell: pwsh

      - name: Build | Compile (UNIX)
        run: |
          cd web/src-tauri
          cat tauri.conf.json
          cargo tauri build
          pwd
          ls
          ls -la target/release/bundle
        shell: bash
        if: ${{ matrix.os != 'windows-latest' }}

      - name: Build | Compile (Windows)
        run: |
          cd web/src-tauri
          Get-Content tauri.conf.json
          cargo tauri build
          ls target/release/bundle
        shell: pwsh
        if: ${{ matrix.os == 'windows-latest' }}

      - name: list bundles
        run: |
          ls -la web/src-tauri/target/release/bundle
        shell: bash

      - name: list mac bundles
        run: |
          ls -la web/src-tauri/target/release/bundle/macos
          ls -la web/src-tauri/target/release/bundle/dmg
        shell: bash
        if: ${{ matrix.os == 'macOS-latest' }}

      - name: Archive build 1
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-build
          path: ./web/src-tauri/target/release/bundle/${{ env.ARTIFACT_NAME1 }}

      - name: Archive build 2
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-build
          path: ./web/src-tauri/target/release/bundle/${{ env.ARTIFACT_NAME2 }}

      - name: Archive build 3
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-build
          path: ./web/src-tauri/target/release/bundle/${{ env.ARTIFACT_NAME3 }}
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Upload release assets
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./web/src-tauri/target/release/bundle/${{ env.ARTIFACT_NAME1 }}
          asset_name: ${{ env.ARTIFACT_NAME1 }}
          asset_content_type: application/octet-stream

      - name: Upload release assets 2
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./web/src-tauri/target/release/bundle/${{ env.ARTIFACT_NAME2 }}
          asset_name: ${{ env.ARTIFACT_NAME2 }}
          asset_content_type: application/octet-stream

      - name: Upload release assets 3
        if: github.event_name == 'release' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./web/src-tauri/target/release/bundle/${{ env.ARTIFACT_NAME3 }}
          asset_name: ${{ env.ARTIFACT_NAME3 }}
          asset_content_type: application/octet-stream

  # release:
  #   needs: compile
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: ubuntu-latest-build
  #         path: artifacts/ubuntu-latest
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: macOS-latest-build
  #         path: artifacts/macOS-latest
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: windows-latest-build
  #         path: artifacts/windows-latest

  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: release-${{ github.run_id }}-beta
  #         release_name: Release-${{ github.run_id }}-beta
  #         draft: false
  #         prerelease: true

  #     - name: Upload Release Asset
  #       id: upload-release-asset-ubuntu
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./artifacts/ubuntu-latest/PinePods
  #         asset_name: PinePods-ubuntu-latest
  #         asset_content_type: application/octet-stream

  #     - name: Upload Release Asset
  #       id: upload-release-asset-macos
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./artifacts/macOS-latest/PinePods
  #         asset_name: PinePods-macOS-latest
  #         asset_content_type: application/octet-stream

  #     - name: Upload Release Asset
  #       id: upload-release-asset-windows
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ./artifacts/windows-latest/PinePods.exe
  #         asset_name: PinePods-windows-latest.exe
  #         asset_content_type: application/octet-stream
